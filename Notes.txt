# Spring Security
- when you add spring security by default a password will be generated for logging in
    to any request username: user
                   password: <generated and printed in console>
- when you visit any endpoint it will redirect you to localhost:8080/login page
    and in the login form, if you inspect you will see there is an input tag
    which has hidden _csrf attribute for "csrf attack". which is generated by server
    every time the page is loaded
    <input name="_csrf" type="hidden" value="YsUMoL0m7-cmYGwyPwRbAMPFaXA4sptC2wgl--qttUq0EyuYWv06lIwe2oULAg9QWylvMqbxREhdhv5vuWoSy9yehXqEIEj8">

- in application/storage of browser dev tools - you will find cookies or session details
- in network tab - you will find after clicking sign in - in payload _csrf token

# custome user and pass for spring basic security
spring.security.user.name=app
spring.security.user.password=pass

# Internal Working of Spring Security
1. incoming request
2. SecurityFilterChain: (fill data in spring security context from headers or request)
    - UsernamePasswordAuthenticationFilter
    - WebAsyncManagerIntegrationFilter
    - SecuritycontextPersistenceFilter
    - LogoutFilter
    - HeaderWriterFilter
    - etc
authentication responsibility is delegated
    |
3. Authentication Manager (return the authenticated user to filter)
    |
4. Authentication Provider (return the authenticated user to authentication manager)
    - DaoAuthenticationProvider
    - InMemoryAuthenticationPRovider
    - OAuth2AuthenticationProvider
    - etc
5. e.g DaoAuthenticationProvider
        |
6. UserDetailService(authenticate from DB) & PasswordEncoder
7. Security Filter will then call SecurityContextHolder
    set Authenticated user in context - SecurityContextHolder(SecurityContext)
         |
8. Dispatcher Servlet and controllers


